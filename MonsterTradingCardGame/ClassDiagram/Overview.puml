@startuml
skinparam packageStyle rectangle
skinparam linetype ortho
skinparam classAttributeIconSize 0

package "API Layer" {
    class HttpServer {
        -TcpListener _server
        +Start()
    }

    class RequestProcessor {
        +ProcessRequest(clientObj: object)
        -ParseHeaders(reader: StreamReader) : Dictionary<string, string>
        -ReadBody(reader: StreamReader, headers: Dictionary<string, string>) : string
    }

    class Router {
        -UserHandler _userHandler
        +RouteRequest(requestLine: string, headers: Dictionary<string, string>, body: string) : Response
    }

    class ResponseBuilder {
        +{static} SendResponse(writer: StreamWriter, response: Response)
        -{static} GetStatusDescription(statusCode: int) : string
    }

    class UserHandler {
        +RegisterUser(request: Request) : Response
        +LoginUser(request: Request) : Response
    }

    class Request {
        +string Method
        +string Path
        +string? Body
    }

    class Response {
        +int StatusCode
        +string Content
        +string ContentType
    }
}

package "Business Layer" {
    class UserService {
        +RegisterUser(user: User)
        +LoginUser(username: string, password: string) : string
    }

    class CardService {
        +CreatePackage(cards: List<Card>)
        +AcquirePackage(user: User) : List<Card>
        +GetUserCards(user: User) : IReadOnlyList<Card>
        +ConfigureDeck(user: User, cardIds: List<string>)
    }

    class BattleService {
        -BattleLogic _battleLogic
        +ExecuteBattle(player1: User, player2: User) : string
    }

    class BattleLogic {
        +DetermineRoundWinner(card1: Card, card2: Card) : int
        +CalculateDamage(attackerCard: Card, defenderCard: Card) : int
        -IsEffectiveAgainst(attacker: ElementType, defender: ElementType) : bool
        -IsWeakAgainst(attacker: ElementType, defender: ElementType) : bool
    }
}

package "Data Layer" {
    class InMemoryDatabase {
        -{static} Dictionary<string, User> _users
        -{static} List<Package> _packages
        -{static} Dictionary<string, string> _tokens
        +{static} AddUser(user: User)
        +{static} GetUser(username: string) : User?
        +{static} AddPackage(package: Package)
        +{static} GetPackage() : Package
        +{static} AddToken(token: string, username: string)
        +{static} GetUsernameFromToken(token: string) : string?
    }
}

package "Domain Models" {
    class User {
        +string Username
        -string Password
        -List<Card> _stack
        +List<Card> Deck
        +int Coins
        +int Elo
        +AddCardToStack(card: Card)
        +AddCardToDeck(card: Card)
        +RemoveCardFromDeck(card: Card)
        +UpdateElo(change: int)
        +GetStack() : IReadOnlyList<Card>
        +ClearDeck()
        +UpdateCoins(newAmount: int)
    }

    class Package {
        -List<Card> Cards
        +{static} int PackagePrice
        -{static} int CardsPerPackage
        +AddCard(card: Card)
        +IsComplete() : bool
        +GetCards() : IReadOnlyList<Card>
    }

    abstract class Card {
        +string Id
        +string Name
        +int Damage
        +ElementType ElementType
        +ToString() : string
    }

    abstract class MonsterCard {
    }

    class SpellCard {
    }

    class Dragon {
    }

    class FireElf {
    }

    class Goblin {
    }

    class Knight {
    }

    class Kraken {
    }

    class Ork {
    }

    class Wizzard {
    }

    enum ElementType {
        Normal
        Fire
        Water
    }

    class LoginData {
        +string Username
        +string Password
    }
}

' Relationships
HttpServer --> RequestProcessor
RequestProcessor --> Router
Router --> UserHandler
UserHandler --> UserService
CardService --> InMemoryDatabase
UserService --> InMemoryDatabase
BattleService --> BattleLogic
BattleService ..> User
UserHandler ..> Request
UserHandler ..> Response
Router ..> Request
Router ..> Response
ResponseBuilder ..> Response

Card <|-- MonsterCard
Card <|-- SpellCard
MonsterCard <|-- Dragon
MonsterCard <|-- FireElf
MonsterCard <|-- Goblin
MonsterCard <|-- Knight
MonsterCard <|-- Kraken
MonsterCard <|-- Ork
MonsterCard <|-- Wizzard
Card "1" *-- "1" ElementType
User "1" o-- "*" Card : has
Package "1" *-- "5" Card : contains

@enduml